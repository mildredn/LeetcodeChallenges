//My solution -- HashSet in Java contains unique elements. Go through the number array and check if the number already exists, if not, add to set, if yes, add to result.
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        Set<Integer> intSet = new HashSet<>();
        List<Integer> result = new ArrayList<Integer>();
        for(int num : nums){
            if(intSet.contains(num)){
                result.add(num);
            }
            intSet.add(num); 
        }
        return result;
    }
}

//However, this solution takes more space, and hence, a better solution would be the following

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> result = new ArrayList<Integer>();
        
        for(int i = 0; i < nums.length; i++){
        //Pick index as nums[i] - 1 since numbers are from 1 to n.
            int index = Math.abs(nums[i]) - 1;
            if(nums[index] < 0){
            //If nums[index] is negative, number already exists, add to result.
                result.add(Math.abs(index + 1));
            }
            //Make number negative
            nums[index] = -nums[index];
        }
        
        return result;
    }
}